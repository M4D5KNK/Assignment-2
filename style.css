* {
    margin: 0px;
    padding: 0px;
}

/* body{
    /* place holder */
/* } */

.navbar {
    width: 100%;
    height: 75px;
    background-color: black;
}

.navbar-container {
    display: flex;
    align-items: center;
    background-color: black;
    padding: 0 50px;
    height: 100%;
    color: white;
    font-family: 'Sen', sans-serif;

}

/* Flex is basically telling it how much space it take up (like how many grids in a table)*/
.logo-container {
    flex: 2;
    font-size: 30px;
    color: #e05a00;
}

/* ------------------------------------------------- */
.menu {
    flex: 6.7;
}

.menu-list {
    display: flex;
    list-style: none;
}

.menu-list-item {
    margin: 30px;
    font-size: 18px;
    cursor: pointer;
}

/* -------------------------------------------------- */
.sign-log {
    flex: 2.3;
    display: flex;
}

.search-icon {
    width: 30px;
    height: 30px;
}

.profile {
    width: 30px;
    height: 30px;
    border-radius: 50%;
}

.login-button {
    /* border: none; */
    text-align: center;
    font-size: 20px;
    padding: 10px 15px;
    cursor: pointer;
    position: relative;
    bottom: 8.5px;
}

.sign-log-item {
    margin: 15px;
}

/* ---------------------------------------------------------------- */

.container {
    width: 100%;
    /* Short for "viewport height," 'vh' allows you to size elements relative to the height of the browser window  */
    /* The calc() CSS function lets you perform calculations when specifying CSS property values. It can be used with <length>, <frequency>, <angle>, <time>, <percentage>, <number>, <integer>, and <color-function> values. */
    height: calc(100vh - 75px);
}

.container-body {
    display: flex;
    /* background-color:#171819; */
    color: white;
    font-family: 'Roboto', sans-serif;
    width: 100%;
    height: 100%;

}

.sign-in-body {
    flex: 1;
    display: flex;
    background-color: #171819;
    /* flex-direction: column; */
    /* align-items: center ; */
}

.intro-text{
    flex: 1;
    font-family: 'Inter', sans-serif;
}
.intro-text h1{
    /* flex: 1; */
    /* font-family: 'Inter', sans-serif; */
    font-size: 3.3rem;
    font-weight: 800;
    margin-top: 7%;
    margin-left: 6%;
    margin-bottom: 3%;
}

.intro-text h3{
    margin-left: 6%;
    margin-right: 10%;
    font-weight: 500;
}

.box{
    flex: 1;
    display: flex;
    position: relative;
    background-color: black;
    width: 330px;
    height: 50%;
    top: 25%;
    align-items: center;
    flex-direction: column;
    border-radius: 15px;
}

.movie-image-container {
    flex: 1;
    overflow: hidden;
    position: relative;
}

.gradient {
    width: 50vh;
    height: calc(100vh - 75px);
    background-image: linear-gradient(to left, rgb(0,0,0,0), #171819);
    position: absolute;
}

.movie-image {
    height: 100%;
    right: 250px;
}

.movie-title{
    position: absolute;
    bottom: 210px;
    left: 80px;
    width: 600px;
}

.movie-info{
    position: absolute;
    bottom: 100px;
    left: 130px;
    margin-right: 280px;
    font-family: 'Roboto', sans-serif;
    font-weight: 500;
    /* font-size: ; */
    color: white;
}

/* The watch now button */
.movie-button {
    position: relative;
    overflow: hidden;
    height: 3rem;
    padding: 0 2rem;
    border-radius: 1.5rem;
    background: #3d3a4e;
    background-size: 400%;
    color: #fff;
    border: none;
    cursor: pointer;
    bottom: 170px;
    left: 700px;
  }
  
  .movie-button:hover::before {
    /* The scaleX() CSS function defines a transformation that resizes an element along the x-axis (horizontally). Its result is a <transform-function> data type. */
    transform: scaleX(1);
  }
  
  /* Lets the text 'watch now' be on the top of the button */
  .movie-button-content {
    position: relative;
    z-index: 1;
  }
  
  .movie-button::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    /* The scaleX(0) is used to get rid of the grey, shrinking it until its gone */
    transform: scaleX(0);
    transform-origin: 0 50%;
    width: 100%;
    /* inherit represents the computed value of the property on the elementâ€™s parent. */
    height: inherit;
    border-radius: inherit;
    background: linear-gradient(
      82.3deg,
      rgb(233, 109, 93) 10.8%,
      rgb(238, 155, 88) 94.3%
    );
    transition: all 0.475s;
  }